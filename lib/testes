// datasource

class FinancialPlanningPdfDataSource extends DataSourceBase {
  FinancialPlanningPdfDataSource(super.client);

  Future<File> downloadPdfFromUrl({
    required String pdfUrl,
  }) async {
    final PDFDataSource pdfDataSource = PDFDataSourceImpl();

    final Dio dio = await client.getDioInstanceForURL();

    final pdfFile = await pdfDataSource.getFromUrl(
      dio,
      pdfUrl,
    );

    return pdfFile;
  }
}


// repository

abstract class FinancialPlanningPdfRepository {
  Future<File> getPdfFile({
    required String pdfUrl,
  });
}

@Injectable(as: FinancialPlanningPdfRepository)
class FinancialPlanningPdfRepositoryImpl
    implements FinancialPlanningPdfRepository {
  const FinancialPlanningPdfRepositoryImpl(this.financialPlanningPdfDataSource);

  final FinancialPlanningPdfDataSource financialPlanningPdfDataSource;

  @override
  Future<File> getPdfFile({
    required String pdfUrl,
  }) async =>
      await financialPlanningPdfDataSource.downloadPdfFromUrl(
        pdfUrl: pdfUrl,
      );
}

// interactor

class FinancialPlanningPdfInteractor {
  final FinancialPlanningPdfRepository repository;

  FinancialPlanningPdfInteractor(this.repository);

  Future<String> getPdfFilePath({
    required String pdfUrl,
  }) async {
    final pdfFile = await repository.getPdfFile(
      pdfUrl: pdfUrl,
    );

    return pdfFile.path;
  }
}
